import React from "react";
import { FaCheckCircle, FaCircle, FaEllipsisH } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import useSingleMedia from "../../hooks/useSingleMedia";

function NotificationItem({ notification, handleMarkRead, handleMarkUnread }) {
  const navigate = useNavigate();

  const {
    mediaUrl: avatarUrl,
    loading: mediaLoading,
    error: mediaError,
  } = useSingleMedia(notification.targetId, "PROFILE", "image");

  const renderAvatar = () => {
    if (mediaLoading) {
      return (
          <div className="w-10 h-10 rounded-full bg-gray-300 animate-pulse mr-3"></div>
      );
    }

    return (
        <img
            src={avatarUrl || "https://placehold.co/40x40?text=Avatar"}
            alt={`Avatar của ${notification.displayName}`}
            className="w-10 h-10 rounded-full object-cover mr-3"
        />
    );
  };

  return (
      <div
          className={`p-3 border-b ${
              !notification.isRead ? "bg-[var(--hover-bg-color)]" : "opacity-75"
          } transition-colors duration-200`}
      >
        <div className="flex items-start">
          {renderAvatar()}
          <div className="flex-grow">
            <div className="flex justify-between items-center">
              <p
                  className="font-bold text-[var(--primary-color)] cursor-pointer m-0"
                  onClick={() => navigate(`/profile/${notification.username}`)}
              >
                {notification.displayName}
              </p>
              <div className="flex items-center space-x-2">
                {!notification.isRead ? (
                    <button
                        onClick={() => handleMarkRead(notification.id)}
                        className="text-[var(--text-color)] hover:text-[var(--primary-color)]"
                        title="Đánh dấu đã đọc"
                    >
                      <FaCheckCircle />
                    </button>
                ) : (
                    <button
                        onClick={() => handleMarkUnread(notification.id)}
                        className="text-[var(--text-color)] hover:text-[var(--primary-color)]"
                        title="Đánh dấu chưa đọc"
                    >
                      <FaCircle />
                    </button>
                )}
                <button
                    className="text-[var(--text-color)] hover:text-[var(--primary-color)]"
                    title="Tùy chọn"
                >
                  <FaEllipsisH />
                </button>
              </div>
            </div>

            <div className="mt-1 p-2 rounded-md hover:bg-black/5 dark:hover:bg-white/5 transition-colors duration-150">
              <p className="mb-1">{notification.message}</p>

              {notification.tags?.length > 0 && (
                  <p className="text-[var(--primary-color)] text-sm mb-1">
                    {notification.tags.map((tag, idx) => (
                        <span key={idx} className="mr-2">
                    {tag}
                  </span>
                    ))}
                  </p>
              )}

              {notification.image?.startsWith("http") && (
                  <img
                      src={notification.image}
                      alt="notification"
                      className="mt-2 rounded max-w-full h-auto"
                  />
              )}

              {notification.image?.startsWith("This image is generated by AI") && (
                  <p className="text-muted text-sm mt-2">{notification.image}</p>
              )}

              <p className="text-muted text-xs mt-2">{notification.timestamp}</p>
            </div>
          </div>
        </div>
      </div>
  );
}

export default NotificationItem;
