import React from "react";
import { Button, Spinner, Image } from "react-bootstrap";
import { FaCheckCircle, FaCircle, FaEllipsisH } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import useUserMedia from "../../hooks/useUserMedia";

function NotificationItem({ notification, handleMarkRead, handleMarkUnread }) {
  const navigate = useNavigate();

  const {
    mediaUrl: avatarUrl,
    loading: mediaLoading,
    error: mediaError,
  } = useUserMedia(notification.targetId, "PROFILE", "image");

  const renderAvatar = () => {
    if (mediaLoading) {
      return <Spinner animation="border" size="sm" className="me-2 mt-1" />;
    }

    return (
      <Image
        src={avatarUrl || "https://placehold.co/40x40?text=Avatar"}
        roundedCircle
        className="me-2"
        style={{ width: "40px", height: "40px", objectFit: "cover" }}
        alt={`Avatar của ${notification.displayName}`}
      />
    );
  };

  return (
    <div
      className={`p-3 border-bottom ${
        !notification.isRead ? "bg-light-primary" : "opacity-75"
      }`}
    >
      {/* Inline style tag chèn trực tiếp CSS cho notif-body */}
      <style>{`
        .notif-body {
          padding-top: 4px;
          transition: background-color 0.2s ease;
          border-radius: 6px;
        }

        .notif-body:hover {
          background-color: rgba(0, 0, 0, 0.03);
        }
      `}</style>

      <div className="d-flex align-items-start">
        {renderAvatar()}
        <div className="flex-grow-1">
          <div className="d-flex justify-content-between align-items-center">
            <p
              className="fw-bold mb-0 cursor-pointer text-primary"
              onClick={() => navigate(`/profile/${notification.username}`)}
            >
              {notification.displayName}
            </p>
            <div>
              {!notification.isRead ? (
                <Button
                  variant="link"
                  className="text-dark p-0 me-2"
                  onClick={() => handleMarkRead(notification.id)}
                >
                  <FaCheckCircle />
                </Button>
              ) : (
                <Button
                  variant="link"
                  className="text-dark p-0 me-2"
                  onClick={() => handleMarkUnread(notification.id)}
                >
                  <FaCircle />
                </Button>
              )}
              <Button variant="link" className="text-dark p-0">
                <FaEllipsisH />
              </Button>
            </div>
          </div>

          <div className="notif-body mt-1">
            <p className="mb-1">{notification.message}</p>

            {notification.tags?.length > 0 && (
              <p className="text-primary small mb-1">
                {notification.tags.map((tag, idx) => (
                  <span key={idx} className="me-1">
                    {tag}
                  </span>
                ))}
              </p>
            )}

            {notification.image?.startsWith("http") && (
              <Image
                src={notification.image}
                fluid
                className="mt-2 rounded"
                style={{ maxWidth: "100%", height: "auto" }}
              />
            )}

            {notification.image?.startsWith("This image is generated by AI") && (
              <p className="text-muted small mt-2">{notification.image}</p>
            )}

            <p className="text-muted small mb-0">{notification.timestamp}</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default NotificationItem;
