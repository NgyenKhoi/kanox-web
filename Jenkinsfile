pipeline {
    agent any

    environment {
        SSH_KEY = '/var/lib/jenkins/.ssh/id_rsa'
        REMOTE_USER = 'vunguyenkhoi47'
        REMOTE_HOST = '34.87.68.190'
        REMOTE_DIR = '/home/vunguyenkhoi47/kanox'
        REMOTE_JAR = "${REMOTE_DIR}/app.jar"
        NGINX_CONF = '/etc/nginx/sites-enabled/kanox.conf'
    }

    stages {
        stage('Clone & Build') {
            steps {
                dir('backend') {
                    script {
                        withCredentials([
                            file(credentialsId: 'my-ssh-key', variable: 'SECRET_FILE'),
                            file(credentialsId: 'gcp-credentials', variable: 'GCP_CREDENTIALS_FILE')
                        ]) {
                            sh 'chmod +x mvnw'        
                            sh './mvnw clean package -DskipTests'

                            sh '''
                            mkdir -p tmp
                            cp "$SECRET_FILE" tmp/application-secret.properties
                        '''
                        }
                    }
                }
            }
        }

        stage('üß™ Debug Env: GOOGLE_APPLICATION_CREDENTIALS') {
            steps {
                sh '''
                    echo "üîç Gi√° tr·ªã GOOGLE_APPLICATION_CREDENTIALS hi·ªán t·∫°i:"
                    echo "$GOOGLE_APPLICATION_CREDENTIALS"
                    echo "---"
                    echo "üåç T·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng c√≥ ch·ª©a GOOGLE:"
                    env | grep GOOGLE || echo "‚ùå Kh√¥ng t√¨m th·∫•y bi·∫øn n√†o"
                '''
            }
        }


        stage('Determine Active/Standby Port') {
            steps {
                script {
                    def status9090 = sh(script: "ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} 'systemctl is-active kanox-9090.service || true'", returnStdout: true).trim()
                    def status9091 = sh(script: "ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} 'systemctl is-active kanox-9091.service || true'", returnStdout: true).trim()

                    def activePort, standbyPort
                    if (status9090 == 'active') {
                        activePort = '9090'
                        standbyPort = '9091'
                    } else if (status9091 == 'active') {
                        activePort = '9091'
                        standbyPort = '9090'
                    } else {
                        error "‚ùå Kh√¥ng c√≥ service n√†o ƒëang ch·∫°y (9090 ho·∫∑c 9091)."
                    }

                    env.ACTIVE_PORT = activePort
                    env.STANDBY_PORT = standbyPort
                    echo "‚úÖ ACTIVE_PORT: ${activePort}, STANDBY_PORT: ${standbyPort}"
                }
            }
        }

                stage('Upload to standby') {
                    steps {
                        script {
                            // Copy jar v√† secrets tr∆∞·ªõc
                            sh """
                                ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} 'mkdir -p ${REMOTE_DIR}'
        
                                scp -i ${SSH_KEY} backend/target/*.jar ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_JAR}
        
                                scp -i ${SSH_KEY} backend/tmp/application-secret.properties ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/application-secret.properties
                            """
        
                            // Sau ƒë√≥ copy GCP credentials trong withCredentials
                            withCredentials([
                                file(credentialsId: 'gcp-credentials', variable: 'GCP_CREDENTIALS_FILE')
                            ]) {
                                sh """
                                    scp -i ${SSH_KEY} \$GCP_CREDENTIALS_FILE ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/gcp-credentials.json
        
                                    ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} '
                                        chmod 600 ${REMOTE_DIR}/application-secret.properties ${REMOTE_DIR}/gcp-credentials.json
                                        chown ${REMOTE_USER}:${REMOTE_USER} ${REMOTE_DIR}/application-secret.properties ${REMOTE_DIR}/gcp-credentials.json
                                    '
                                """
                            }
                        }
                    }
                }

        stage('Restart standby service') {
            steps {
                sh """
                    ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} '
                        set -e
                        echo "üõë D·ª´ng service kanox-${STANDBY_PORT} n·∫øu ƒëang ch·∫°y..."
                        sudo systemctl stop kanox-${STANDBY_PORT}.service || true
                        sleep 2
                        if sudo lsof -i :${STANDBY_PORT}; then
                            echo "‚ö†Ô∏è Port ${STANDBY_PORT} v·∫´n b·ªã chi·∫øm, kill th·ªß c√¥ng..."
                            sudo fuser -k ${STANDBY_PORT}/tcp || true
                            sleep 2
                        fi
                        echo "üöÄ Kh·ªüi ƒë·ªông service kanox-${STANDBY_PORT}..."
                        sudo systemctl start kanox-${STANDBY_PORT}.service
                    '
                """
            }
        }

        stage('Health check standby') {
            steps {
                script {
                    def success = false
                    for (int i = 0; i < 30; i++) {
                        echo "üîÅ Checking health on port ${STANDBY_PORT}, attempt ${i + 1}"
                        try {
                            def response = sh(script: "curl -s http://localhost:${STANDBY_PORT}/actuator/health", returnStdout: true).trim()
                            echo "‚úÖ Health check response: ${response}"
                            
                            if (response.contains('"status":"UP"')) {
                                success = true
                                break
                            }
        
                            // ‚ùå N·∫øu tr·∫£ v·ªÅ DOWN ho·∫∑c b·∫•t k·ª≥ response b·∫•t th∆∞·ªùng n√†o
                            if (response.contains('"status":"DOWN"') || response == 'FAIL') {
                                echo "‚ùå Service tr·∫£ v·ªÅ l·ªói: ${response}, d·ª´ng ki·ªÉm tra s·ªõm."
                                break
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è L·ªói khi g·ªçi curl: ${e.getMessage()}"
                            break // c≈©ng c√≥ th·ªÉ d√πng continue n·∫øu b·∫°n mu·ªën th·ª≠ l·∫°i khi curl l·ªói
                        }
        
                        sleep(time: 2, unit: 'SECONDS')
                    }
        
                    if (!success) {
                        error("‚ùå Service on port ${STANDBY_PORT} kh√¥ng healthy sau 30 l·∫ßn ki·ªÉm tra.")
                    }
                }
            }
        }

        stage('Switch traffic with NGINX') {
            steps {
                echo "üîÅ ƒê·ªïi NGINX t·ª´ ${ACTIVE_PORT} ‚ûù ${STANDBY_PORT}"
                sh """
                    ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} '
                        sudo sed -i "s/${ACTIVE_PORT}/${STANDBY_PORT}/g" ${NGINX_CONF} && \
                        sudo nginx -t && \
                        sudo systemctl reload nginx
                    '
                """
            }
        }

        stage('Stop old service') {
            steps {
                sh """
                    ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} '
                        echo "üõë D·ª´ng service c≈© kanox-${ACTIVE_PORT}..."
                        sudo systemctl stop kanox-${ACTIVE_PORT}.service || true
                        sleep 2
                        if sudo lsof -i :${ACTIVE_PORT}; then
                            echo "‚ö†Ô∏è Port ${ACTIVE_PORT} v·∫´n b·ªã chi·∫øm, kill th·ªß c√¥ng..."
                            sudo fuser -k ${ACTIVE_PORT}/tcp || true
                        fi
                    '
                """
            }
        }

        stage('Cleanup secrets') {
            steps {
                sh """
                    ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} '
                        echo "üßπ X√≥a file secrets sau khi deploy..."
                        rm -f ${REMOTE_DIR}/application-secret.properties
                        rm -f ${REMOTE_DIR}/gcp-credentials.json
                    '
                """
            }
        }
    }

    post {
        success {
            echo '‚úÖ Tri·ªÉn khai Zero Downtime ho√†n t·∫•t th√†nh c√¥ng!'
        }
        failure {
            echo '‚ùå C√≥ l·ªói x·∫£y ra khi tri·ªÉn khai.'
        }
    }
}
